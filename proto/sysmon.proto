syntax = "proto3";
option go_package = "sysmon/proto/sysmonpb";
package sysmonpb;

import "google/api/annotations.proto";

message PingRequest {

}
message DongReq{
  string id =1;
}
message DongRes{
  string response =1;
}
message PP{
  repeated string name =1;
}
message PingResponse {
  PP body =1;
}

message PongRequest {
  Person body                                          = 1;
}
message Person{
  string name                                          = 1;
  int64 age                                            = 2;
}
message PongResponse {
  Person body                                          = 1;
}

message Rule{
  string priority =1;
  string rule     =2;
}
message Rules{
  repeated Rule rules =1;
}
message RuleRespone{
  Rules response   =1;
}

message Route{
  string index     =1;
  string route     =2;
  string tableName  =3;
}
message Routes{
  repeated Route routes =1;
}
message RouteRespone{
  Routes response   =1;
}

message Response{
  string msg              =1;
}
message Request{
  string sourceIp        =1;
  string tableName       =2;
  string destination      =3;
  string intermediate     =4;
  string interfaceName    =5;
}
message IPRequest{
  Request request        =1; 
}
message IPResponse{
  Response response       =1;
}

message IpAddress{
  string IP   =1;
  string Type =2;
}
message IpAddresses{
  repeated IpAddress addresses  =1;
}
message InterfaceAddressesResponse{
  IpAddresses response   =1;
}

message Interface{
  string index   =1;
  string name =2;
}
message Interfaces{
  repeated Interface interfaces  =1;
}
message InterfacesResponse{
  Interfaces response   =1;
}
message Gateway{
  string destination  =1;
  string gateway      =2;
}

message IPTable{
  string tableNumber    =1;
  string tableName      =2;
}
message IPTables{
  repeated IPTable  tables =1;
}
message IPTablesResponse{
  IPTables response   =1;
}

message InterfaceDetails{
  string name =1;
	repeated Gateway gateways  =2;
	repeated IpAddress normalAddress =3;
	repeated IpAddress multicastAddress  =4;
}
message InterfaceDetailsResponse{
  InterfaceDetails response =1;
}

service SysmonService {
  rpc Dong(DongReq) returns (DongRes) {
    option (google.api.http) = {
      get: "/api/v1/dong/{id}"
      response_body: "response"
    };
  }

  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      get: "/api/v1/ping"
      response_body: "body"
    };
  }
  rpc Pong(PongRequest) returns (PongResponse) {
    option (google.api.http) = {
      post: "/api/v1/pong"
      body: "body"
      response_body: "body"
    };
  }
  rpc AddRule(IPRequest) returns (IPResponse) {
    option (google.api.http) = {
      post: "/api/v1/addrule"
      body: "request"
      response_body: "response"
    };
  }

  rpc DelRule(IPRequest) returns (IPResponse) {
    option (google.api.http) = {
      post: "/api/v1/delrule"
      body: "request"
      response_body: "response"
    };
  }

  rpc AddRoute(IPRequest) returns (IPResponse) {
    option (google.api.http) = {
      post: "/api/v1/addroute"
      body: "request"
      response_body: "response"
    };
  }

  rpc DelRoute(IPRequest) returns (IPResponse) {
    option (google.api.http) = {
      post: "/api/v1/delroute"
      body: "request"
      response_body: "response"
    };
  }

  rpc Rules(IPRequest) returns (RuleRespone) {
    option (google.api.http) = {
      get: "/api/v1/rules"
      response_body: "response"
    };
  }
  rpc Routes(IPRequest) returns (RouteRespone) {
    option (google.api.http) = {
      get: "/api/v1/routes"
      response_body: "response"
    };
  }
  rpc RoutesByTableName(Request) returns (RouteRespone) {
    option (google.api.http) = {
      get: "/api/v1/routes/{tableName}"
      response_body: "response"
    };
  }
  rpc InterfaceAddresses(IPRequest) returns (InterfaceAddressesResponse) {
    option (google.api.http) = {
      get: "/api/v1/interfaceaddresses"
      response_body: "response"
    };
  }
  rpc Interfaces(IPRequest) returns (InterfacesResponse) {
    option (google.api.http) = {
      get: "/api/v1/interfaces"
      response_body: "response"
    };
  }
  rpc InterfaceDetailsByName(Request) returns (InterfaceDetailsResponse) {
    option (google.api.http) = {
      get: "/api/v1/interface/{interfaceName}"
      response_body: "response"
    };
  }
  rpc IpTables(Request) returns (IPTablesResponse) {
    option (google.api.http) = {
      get: "/api/v1/tables"
      response_body: "response"
    };
  }
  rpc AddTable(IPRequest) returns (Response) {
    option (google.api.http) = {
      post: "/api/v1/addtable"
      body: "request"
      response_body: "msg"
    };
  }
}